// https://www.codewars.com/kata/56a5d994ac971f1ac500003e


/**
 * -- Базовая информация
 * 1. Фукнция принимает два параметра.
 * 2. Первый параметр - это массив строк через который нужно пробежаться.
 * 3. Второй параметр - это сколько соединённых слов должно быть для конечной самой длинной строки
 * 
 * -- Алгоритм
 * 1. Должна пыть пуская строка в которую мы запишем промежуточный результат
 * 2. Пробегаемся по массива и на каждой итерации соединяем столкьо слов, сколько нужно, 
 * основываясь на втором парметра (в первоначальной весии его можно опустить)
 * 3. Если длина новой строки больше предыдущей заменяем заменяем и цикл продолжается
 * 4. Если длина строк одинаковая, ничего не делаем, так как вернуть нужно первый результат
 */


export function longestConsec(strarr: string[], k: number): string {
	const { length } = strarr;
	let result: string = '';

	if (k < 0 || k > length) return '';

	for (let i = 0; i < length; i++) {
		/**
		 * slice - это местод массива, который принипает 1/2 параметра, первый из которых - начальный индекс
		 * Таким образом на каждой итерации мы начинаем искать с индекса i, - 0, 1, 2, 3
		 * Второй параметр - ДО какого, начиная с нулевого индекса получить элемент
		 * Исходя из чего на каждой итерации мы передаём k - сколько слов нужно сложить, плюс i - текущий индекс
		 * Основываясь, на каждой итерации мы получаем массив состоящий из двух элементов, Если k = 2;
		 */
		let connect = strarr.slice(i, k + i).join('');

		result.length < connect.length
			? result = connect
			: result;
	}

	return result;
}

console.log(longestConsec(["zone", "abigail", "theta", "form", "libe", "zas"], 2)); // abigailtheta
